name: Build Python Runtimes

on:
  pull_request:
    types: [opened, synchronize]
    branches: master
  push:
    branches: master
  workflow_dispatch:

# env:
#   PYTHON_VERSION: "3.11.2"

jobs:
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        # Read the contents of the matrix.json file into the matrix variable
        run: |
          matrix=$(jq -Mc . matrix.json)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
  build:
    needs: setup_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.setup_matrix.outputs.matrix).platform }}
        package_group: ${{ fromJSON(needs.setup_matrix.outputs.matrix).python_package_groups }}
        include: ${{ fromJSON(needs.setup_matrix.outputs.matrix).include }}
    env:
      NATIVE_ARCH: "amd64"
    steps:
      - id: set-derived-env-vars
        name: Set derived env vars
        run: |
          echo "PYTHON_VERSION=$(echo ${{ matrix.python_version }})" >> $GITHUB_ENV
          echo "ARCH=$(echo ${{ matrix.platform }} | cut -d'-' -f2)" >> $GITHUB_ENV
          echo "PLATFORM_NAME=$(echo ${{ matrix.platform }} | cut -d'-' -f1)" >> $GITHUB_ENV
          ASSET_VERSION=${GITHUB_SHA:0:7}
          ASSET_VERSION=${ASSET_VERSION:-local}
          echo "ASSET_VERSION=${ASSET_VERSION}" >> $GITHUB_ENV
      - id: derive-more-vars
        name: Derive additional variables
        run: |
          echo "docker_image=$(cat Dockerfile.${{ env.PLATFORM_NAME }} | grep FROM | awk {'print $NF'})" >> $GITHUB_ENV
          echo "ASSET_IMAGE_NAME=sensu-python-runtime-${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}:${{ env.ASSET_VERSION }}" >> $GITHUB_ENV
      - id: show-matrix
        name: Show matrix
        run: |
          echo ${{ matrix.package_group.group_name }}
          echo ${{ join(matrix.package_group.packages, ',') }}
      # - name: temp create dummy zips
      #   run: |
      #     mkdir -p dist
      #     echo "rubbish" > dist/${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}-${{ env.ASSET_VERSION }}_vanilla_${{ env.ARCH }}.tar.gz
      #     echo "rubbish" > dist/${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}-${{ env.ASSET_VERSION }}_with_requests_${{ env.ARCH }}.tar.gz
      - id: setup-qemu
        name: Set up QEMU # emulated architecture
        if: ${{ env.ARCH != env.NATIVE_ARCH }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/${{ inputs.arch }}
      - name: Set up Docker Buildx # emulated architecture
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/${{ env.ARCH }}
      - uses: actions/checkout@v3
      - name: Build image
        uses: docker/build-push-action@v4
        with:
          platforms: linux/${{ env.ARCH }}
          push: false
          tags: ${{ env.ASSET_IMAGE_NAME }}
          file: Dockerfile.${{ env.PLATFORM_NAME }}
          context: .
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            PLATFORM=${{ env.PLATFORM_NAME }}
            ASSET_VERSION=${{ env.ASSET_VERSION }}
            PACKAGES=${{ join(matrix.package_group.packages, ',') }}
          outputs: type=docker,dest=/tmp/${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}.tar
      - name: Load image
        run: |
          docker load --input /tmp/${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}.tar
      - name: Extract assets
        run: |
          docker run --rm -v ${PWD}/dist:/dist ${{ env.ASSET_IMAGE_NAME }} sh -c "cp /assets/* /dist/"
      - name: Test assets
        run: |
          docker run --rm -e python_version=${{ env.PYTHON_VERSION }} -e platform=${{ env.PLATFORM_NAME }} \
            -e test_platform=${{ env.docker_image }} -e asset_version=${{ env.ASSET_VERSION }} -v "${PWD}/tests/:/tests" -v "${PWD}/dist:/dist" \
            ${{ env.ASSET_IMAGE_NAME }} /tests/test.sh ${{ join(matrix.package_group.packages, ',') }}
      - name: Tar/gz the contents of dist/*.tar.gz
        run: |
          tar -czvf dist/${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}-${{ env.ASSET_VERSION }}.tar.gz dist/*.tar.gz
      - name: Upload asset to cache
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}-${{ env.ASSET_VERSION }}-${{ env.ARCH }}
          path: dist/${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}-${{ env.ASSET_VERSION }}.tar.gz
  create_release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push new release
        run: |
          release="${GITHUB_SHA:0:7}"
          gh release create ${release} --title ${release}
  upload_assets:
    if: github.event_name == 'push'
    needs: [setup_matrix, create_release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.setup_matrix.outputs.matrix).platform }}
        package_group: ${{ fromJSON(needs.setup_matrix.outputs.matrix).python_package_groups }}
        include: ${{ fromJSON(needs.setup_matrix.outputs.matrix).include }}
    steps:
      - id: set-derived-env-vars
        run: |
          echo "PYTHON_VERSION=$(echo ${{ matrix.python_version }})" >> $GITHUB_ENV
          echo "ARCH=$(echo ${{ matrix.platform }} | cut -d'-' -f2)" >> $GITHUB_ENV
          echo "PLATFORM_NAME=$(echo ${{ matrix.platform }} | cut -d'-' -f1)" >> $GITHUB_ENV
          ASSET_VERSION=${GITHUB_SHA:0:7}
          ASSET_VERSION=${ASSET_VERSION:-local}
          echo "ASSET_VERSION=${ASSET_VERSION}" >> $GITHUB_ENV
      - name: Download asset cache
        if: ${{ !github.event.act }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}-${{ env.ASSET_VERSION }}-${{ env.ARCH }}
          path: dist/
      - name: Extract the asset tar.gz file
        if: ${{ !github.event.act }}
        run: |
          tar -xvf dist/${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}-${{ env.ASSET_VERSION }}.tar.gz
          rm dist/${{ env.PYTHON_VERSION }}-${{ env.PLATFORM_NAME }}-${{ env.ASSET_VERSION }}.tar.gz
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: ${{ env.ASSET_VERSION }}
          file: dist/*.tar.gz
          file_glob: true
          tag: ${{ env.ASSET_VERSION }}
          overwrite: true
  deploy:
    if: github.event_name == 'push'
    needs: [setup_matrix, upload_assets]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # required to retrieve the aws credentials
    env:
      GH_TOKEN: ${{ github.token }}
    strategy:
      matrix:
        environment: [dev, test]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Download all assets attached to the last release
      - name: Download release assets
        run: |
          mkdir -p dist
          cd dist
          gh release download -p '*.tar.gz'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/sensu-assets-role-${{ matrix.environment }}env
          role-session-name: OIDCSession
          aws-region: eu-west-1
      - name: Upload assets to S3
        run: |
          cd dist
          aws s3 sync . s3://em-sensu-python-runtime-${{ matrix.environment }}/
